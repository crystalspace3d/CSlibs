SubDir TOP ;

CleanDir clean :
    out ;
Clean distclean :
    aclocal.m4
    config.h
    config.h.in~
    config.log
    config.status
    config.status.lineno
    config.cache
    configure.lineno
    Jamconfig
    Jamfile ;
CleanDir distclean :
    autom4te.cache ;
Depends distclean : clean ;

Clean maintainerclean :
  config.h.in
  configure ;
Depends maintainerclean : distclean ;

Help distclean : "Remove built targets and configuration" ;
Help maintainerclean :
    "Remove built targets, configuration, and generated files." ;

# Set up subdirectories into which the different generated project for 
# different go.
MsvcGenSubDir TOP msvc : common ;
MsvcGenSubDir TOP msvc 8 : 8 ;
MsvcGenSubDir TOP msvc 9 : 9 ;
MsvcGenSubDir TOP msvc 10 : 10 ;
MsvcGenTemplateDir TOP mk msvcgen ;

# Customize the build configurations to contain some defines required by
# CrystalSpace.  NOTE: The file with the customization options is assumed
# to reside in mk/msvcgen/.
MsvcGenVariable customize : custom.cslib ;

# Set up the workspace we want msvcgen to synthesize.
MsvcGenWorkspace CSlibs ;

rule CcRule { }
RegisterFileType CcRule : .c ;
RegisterHeaderRule HeaderRule : $(HDRPATTERN) : .c ;

rule C++Rule { }
RegisterFileType C++Rule : .cpp .cc .c++ ;
RegisterHeaderRule HeaderRule : $(HDRPATTERN) : .cpp .cc .c++ ;

include $(SUBDIR)/source/Jamfile ;

SubDir TOP ;

#
# Set up symbol collection targets.
#

SYMDIR = "$(BUILDTOP)/out/symbols" ;

VC_VER = 8 9 10 ;
MINGW_VER = 4.5 4.6 4.7 ;
MINGW64_VER = 4.5 ; 

CleanDir collectsymbols_clean : $(SYMDIR) ;
Depends collectsymbols_collect : collectsymbols_clean ;
CollectSymbols collectsymbols_collect : 
  libs/release 
  libs/releasenocygwin
  libs/releasevc$(VC_VER)only
  libs/releasevc$(VC_VER)only_static 
  libs/releasewxvc$(VC_VER)only
  libs/release-x64
  libs/releasenocygwin-x64
  libs/releasevc$(VC_VER)only-x64
  libs/releasevc$(VC_VER)only_static-x64
  libs/releasewxvc$(VC_VER)only-x64
  libs/soft_oal
  libs/soft_oal-x64
  : $(SYMDIR) ;
Depends collectsymbols_compress : collectsymbols_collect ;
CompressSymbols collectsymbols_compress : $(SYMDIR) ;
Depends collectsymbols : collectsymbols_compress ;

UploadDir uploadsymbols : $(SYMDIR) : 
  crystal@crystalspace3d.org :
  www/crystalspace3d.org/htdocs/symbols ;
  
#
# Collect things to distribute into file lists.
#

RECURSE_HELPER_REL_PATH = ;
RECURSE_HELPER_FILE_LIST = ;
rule GrabRecurseHelper
{
  local listdir = $(SUBDIR_TOKENS) $(2) ;
  local file_gristed = $(1:G=$(listdir:J=!)) ;
  FileListEntriesData $(file_gristed) : $(RECURSE_HELPER_REL_PATH) $(2) : $(RECURSE_HELPER_FILE_LIST) ;
}
# GrabRecursive suffixes : source_dir : file_list_rel_path : file_list
rule GrabRecursive
{
  local save_SUBDIR_TOKENS = $(SUBDIR_TOKENS) ;
  SubDir TOP $(2) ;
  RECURSE_HELPER_REL_PATH = $(3) ;
  RECURSE_HELPER_FILE_LIST = $(4) ;
  Recurse GrabRecurseHelper : .$(1) ;
  RECURSE_HELPER_REL_PATH = ;
  RECURSE_HELPER_FILE_LIST = ;
  SubDir TOP $(save_SUBDIR_TOKENS) ;
}
rule GrabHeaders
{
  # All the suffixes beyond h, hpp, manifest are for WX
  GrabRecursive h hpp inl manifest cur ico bmp rc cpp : $(1) : $(2) : $(3) ;
}

# Headers for 'common' compiler-independent libs
SubDir TOP source configs ;
BASE_CONFIGS = [ Wildcard *.h ] ;
FileListEntriesData $(BASE_CONFIGS) : common include : base.all.any ;
SubDir TOP source configs libjpeg ;
JPEG_CONFIGS = [ Wildcard *.h ] ;
FileListEntriesData $(JPEG_CONFIGS) : common include : base.all.any ;
SubDir TOP temp mingw prefix include ;
FileListEntriesData [ Filter [ Wildcard *.h ] : $(JPEG_CONFIGS) $(BASE_CONFIGS) ] : common include : base.all.any ;
SubDir TOP ;
GrabHeaders temp mingw prefix include lib3ds : common include lib3ds : base.all.any ;
GrabHeaders source configs lib3ds : common include lib3ds : base.all.any ;
GrabHeaders source libode include ode : common include ode : base.all.any ;
GrabHeaders source configs ode : common include ode : base.all.any ;
GrabHeaders temp mingw prefix include ogg : common include ogg : base.all.any ;
GrabHeaders temp mingw prefix include speex : common include speex : base.all.any ;
GrabHeaders temp mingw prefix include vorbis : common include vorbis : base.all.any ;
SubDir TOP source configs freetype config ;
FREETYPE_CONFIGS = [ Wildcard *.h ] ;
FileListEntriesData $(FREETYPE_CONFIGS) : common include freetype2 config : base.all.any ;
SubDir TOP temp mingw prefix include freetype2 ;
FileListEntriesData [ Wildcard *.h ] : common include freetype2 : base.all.any ;
SubDir TOP temp mingw prefix include freetype2 config ;
FileListEntriesData [ Filter [ Wildcard *.h ] : $(FREETYPE_CONFIGS) ] : common include freetype2 config : base.all.any ;
SubDir TOP ;

# Headers for compiler-dependent libs
# ...but since the *headers* are mostly the same, grab them from only one 'target'
BASELINE_HEADERS_PREFIX = prefix-mingw-gcc-4.5 ;
# FIXME: WX headers are same for VC and gcc, but have slighty different locations...
GrabHeaders temp libwx $(BASELINE_HEADERS_PREFIX) include wx-2.9 : vc include : wx.vc.any ;
SubDir TOP source libwx include wx msw ;
FileListEntriesData setup.h : vc include wx : wx.vc.any ;
SubDir TOP source libwx include wx msw ;

GrabHeaders temp libassimp $(BASELINE_HEADERS_PREFIX) include assimp : common include assimp : base.all.any ;
GrabHeaders temp libbullet $(BASELINE_HEADERS_PREFIX) include bullet : common include bullet : base.all.any ;
GrabHeaders temp libcal3d $(BASELINE_HEADERS_PREFIX) include cal3d : common include cal3d : base.all.any ;
GrabHeaders temp libCEGUI prefix-mingw include CEGUI : common include : base.all.any ;
# Headers for libs w/o source code
GrabHeaders nosource all Cg include : common include : cg.all.any ;
GrabHeaders nosource all OpenAL include : common include AL : base.all.any ;
GrabHeaders nosource all directx include : common include : dxheaders.all.any ;

# Support stuff
SubDir TOP tools ;
FileListEntriesData wx-config : tools : wx.all.x86 ;
FileListEntriesData x86_64-w64-mingw32-wx-config : tools : wx.all.x64 ;
SubDir TOP ;

#
# Library binaries
#
local ARCH ;
for ARCH in x86 x64
{
  local ARCH_SUFFIX = "" ;
  if $(ARCH) = x64 { ARCH_SUFFIX = "-x64" ; }
  # Common libs
  SubDir TOP libs Release$(ARCH_SUFFIX) ;
  FileListEntriesData [ Wildcard *.dll ] : dlls : base-dll.all.$(ARCH) ;
  FileListEntriesData [ Wildcard *.lib ] : common lib : base-dll.all.$(ARCH) ;
  FileListEntriesData [ Wildcard *.pdb ] : dlls : base-dll-pdb.all.$(ARCH) ;
  SubDir TOP libs Release_static$(ARCH_SUFFIX) ;
  FileListEntriesData [ Wildcard *.lib ] : vc lib : base-static.vc.$(ARCH) ;
  FileListEntriesData [ Wildcard *.pdb ] : vc lib : base-static.vc.$(ARCH) ;
  SubDir TOP libs ReleaseNoCygwin$(ARCH_SUFFIX) ;
  FileListEntriesData [ Wildcard *.dll ] : dlls : base-dll.all.$(ARCH) ;
  FileListEntriesData [ Wildcard *.lib ] : common lib : base-dll.all.$(ARCH) ;
  FileListEntriesData [ Wildcard *.pdb ] : dlls : base-dll-pdb.all.$(ARCH) ;
  SubDir TOP libs ReleaseNoCygwin_static$(ARCH_SUFFIX) ;
  FileListEntriesData [ Wildcard *.lib ] : vc lib : base-static.vc.$(ARCH) ;
  FileListEntriesData [ Wildcard *.pdb ] : vc lib : base-static.vc.$(ARCH) ;
  SubDir TOP ;
  # Cg libs
  SubDir TOP nosource $(ARCH) Cg dlls ;
  FileListEntriesData [ Wildcard *.dll ] : dlls : cg.all.$(ARCH) ;
  SubDir TOP nosource $(ARCH) Cg lib ;
  FileListEntriesData [ Wildcard *.lib ] : common lib : cg.all.$(ARCH) ;
  SubDir TOP ;
  # dbghelp
  SubDir TOP nosource $(ARCH) dbghelp ;
  FileListEntriesData dbghelp.dll : dlls : dbghelp.all.$(ARCH) : dbghelp$(ARCH_SUFFIX).dll ;
  SubDir TOP ;
  # DirectX
  SubDir TOP nosource $(ARCH) directx lib ;
  FileListEntriesData [ Wildcard *.lib ] : common lib : dx.all.$(ARCH) ;
  SubDir TOP ;
  # OpenAL
  SubDir TOP libs soft_oal$(ARCH_SUFFIX) ;
  FileListEntriesData soft_oal$(ARCH_SUFFIX).dll : openal : openal.all.$(ARCH) : soft$(ARCH_SUFFIX)_oal.dll ;
  FileListEntriesData [ Wildcard *.pdb ] : openal : openal-pdb.all.$(ARCH) ;
  SubDir TOP nosource $(ARCH) OpenAL bin ;
  FileListEntriesData [ Wildcard *.dll ] : openal : openal.all.$(ARCH) ;
  SubDir TOP nosource $(ARCH) OpenAL libs ;
  FileListEntriesData [ Wildcard *.lib ] : common lib : base.all.$(ARCH) ;
  SubDir TOP ;

  # VC libraries
  local vc ;
  for vc in $(VC_VER)
  {
    SubDir TOP libs ReleaseVC$(vc)Only$(ARCH_SUFFIX) ;
    FileListEntriesData [ Wildcard *.dll ] : dlls vc : base-dll.vc$(vc).$(ARCH) ;
    FileListEntriesData [ Wildcard *.lib ] : vc lib : base-dll.vc$(vc).$(ARCH) ;
    FileListEntriesData [ Wildcard *.pdb ] : dlls vc : base-dll-pdb.vc$(vc).$(ARCH) ;
    SubDir TOP ;
    # Bullet, assimp: static libs are used for both DLL and static libs package
    SubDir TOP libs ReleaseVC$(vc)Only_static$(ARCH_SUFFIX) ;
    FileListEntriesData [ Wildcard bullet*.lib ] : vc lib : base.vc$(vc).$(ARCH) ;
    FileListEntriesData [ Wildcard bullet*.pdb ] : vc lib : base.vc$(vc).$(ARCH) ;
    FileListEntriesData [ Wildcard assimp*.lib ] : vc lib : base.vc$(vc).$(ARCH) ;
    FileListEntriesData [ Wildcard assimp*.pdb ] : vc lib : base.vc$(vc).$(ARCH) ;
    # Static versions of cal3d, cegui
    FileListEntriesData [ Wildcard cal3d*.lib ] : vc lib : base-static.vc$(vc).$(ARCH) ;
    FileListEntriesData [ Wildcard cal3d*.pdb ] : vc lib : base-static.vc$(vc).$(ARCH) ;
    FileListEntriesData [ Wildcard CEGUI*.lib ] : vc lib : base-static.vc$(vc).$(ARCH) ;
    FileListEntriesData [ Wildcard libCEGUI*.dll ] : dlls vc : base-static.vc$(vc).$(ARCH) ;
    FileListEntriesData [ Wildcard libCEGUI*.pdb ] : dlls vc : base-static-pdb.vc$(vc).$(ARCH) ;
    SubDir TOP ;
    
    SubDir TOP libs ReleaseWXVC$(vc)Only$(ARCH_SUFFIX) ;
    FileListEntriesData [ Wildcard *.dll ] : dlls vc : wx.vc$(vc).$(ARCH) ;
    FileListEntriesData [ Wildcard *.lib ] : vc lib : wx.vc$(vc).$(ARCH) ;
    FileListEntriesData [ Wildcard *.pdb ] : dlls vc : wx-pdb.vc$(vc).$(ARCH) ;
    SubDir TOP ;
  }
  
  # MinGW libraries
  local ARCH_SUFFIX_MGW = "" ;
  if $(ARCH) = x64 { ARCH_SUFFIX_MGW = "64" ; }
  SubDir TOP libs ReleaseGCCOnly mingw$(ARCH_SUFFIX_MGW) ;
  # Cg libs are used for the static package as well
  local CG_LIBS = [ Wildcard libcg* ] ;
  FileListEntriesData $(CG_LIBS) : mingw$(ARCH_SUFFIX_MGW) lib : base.gcc.$(ARCH) ;
  FileListEntriesData [ Filter [ Wildcard *.a ] : $(CG_LIBS) ] : mingw$(ARCH_SUFFIX_MGW) lib : base-dll.gcc.$(ARCH) ;
  SubDir TOP ;
  SubDir TOP libs ReleaseGCCOnly_static mingw$(ARCH_SUFFIX_MGW) ;
  FileListEntriesData [ Wildcard *.a ] : mingw$(ARCH_SUFFIX_MGW) lib : base-static.gcc.$(ARCH) ;
  SubDir TOP ;

  GrabHeaders temp libwx $(BASELINE_HEADERS_PREFIX) include : mingw$(ARCH_SUFFIX_MGW) include : wx.gcc.$(ARCH) ;
  local mingw ;
  for mingw in $(MINGW$(ARCH_SUFFIX_MGW)_VER)
  {
    SubDir TOP libs ReleaseGCCOnly mingw$(ARCH_SUFFIX_MGW) ;
    FileListEntriesData [ Wildcard *-$(mingw).dll ] : dlls mingw$(ARCH_SUFFIX_MGW) : base-dll.gcc$(mingw).$(ARCH) ;
    FileListEntriesData [ Wildcard *-$(mingw).dll.dbg ] : dlls mingw$(ARCH_SUFFIX_MGW) : base-dll-pdb.gcc$(mingw).$(ARCH) ;
    SubDir TOP libs ReleaseGCCOnly mingw$(ARCH_SUFFIX_MGW)-gcc-$(mingw) ;
    # These libs, except CEGUI, are also used for the static package
    local CEGUI_LIBS = [ Wildcard libCEGUI* ] ;
    FileListEntriesData [ Filter [ Wildcard *.a ] : $(CEGUI_LIBS) ] : mingw$(ARCH_SUFFIX_MGW)-gcc-$(mingw) lib : base.gcc$(mingw).$(ARCH) ;
    FileListEntriesData $(CEGUI_LIBS) : mingw$(ARCH_SUFFIX_MGW)-gcc-$(mingw) lib : base-dll.gcc$(mingw).$(ARCH) ;
    SubDir TOP libs ReleaseGCCOnly_static mingw$(ARCH_SUFFIX_MGW)-gcc-$(mingw) ;
    FileListEntriesData [ Wildcard *.a ] : mingw$(ARCH_SUFFIX_MGW)-gcc-$(mingw) lib : base-static.gcc$(mingw).$(ARCH) ;
    SubDir TOP libs ReleaseGCCOnly_static mingw$(ARCH_SUFFIX_MGW) ;
    FileListEntriesData [ Wildcard *-$(mingw).dll ] : dlls mingw$(ARCH_SUFFIX_MGW) : base-static.gcc$(mingw).$(ARCH) ;
    FileListEntriesData [ Wildcard *-$(mingw).dll.dbg ] : dlls mingw$(ARCH_SUFFIX_MGW) : base-static-pdb.gcc$(mingw).$(ARCH) ;
    
    SubDir TOP libs prefix-wx mingw$(ARCH_SUFFIX_MGW)-gcc-$(mingw) lib ;
    FileListEntriesData [ Wildcard *.a ] : mingw$(ARCH_SUFFIX_MGW)-gcc-$(mingw) lib : wx.gcc$(mingw).$(ARCH) ;
    FileListEntriesData [ Wildcard *.dll ] : dlls mingw$(ARCH_SUFFIX_MGW) : wx.gcc$(mingw).$(ARCH) ;
    FileListEntriesData [ Wildcard *.dbg ] : dlls mingw$(ARCH_SUFFIX_MGW) : wx-pdb.gcc$(mingw).$(ARCH) ;
    SubDir TOP libs prefix-wx mingw$(ARCH_SUFFIX_MGW)-gcc-$(mingw) lib wx config ;
    FileListEntriesData [ Filter [ Wildcard * ] : . .. ] : mingw$(ARCH_SUFFIX_MGW)-gcc-$(mingw) lib wx config : wx.gcc$(mingw).$(ARCH) ;
    SubDir TOP libs prefix-wx mingw$(ARCH_SUFFIX_MGW)-gcc-$(mingw) ;
    FileListEntriesData [ Wildcard wx-config-* ] : : wxconfig.gcc$(mingw).$(ARCH) ;
    SubDir TOP ;
    GrabHeaders libs prefix-wx mingw$(ARCH_SUFFIX_MGW)-gcc-$(mingw) lib wx include : mingw$(ARCH_SUFFIX_MGW)-gcc-$(mingw) lib wx include : wx.gcc$(mingw).$(ARCH) ;
  }
}

# Installer building
rule GenerateSetupFiles
{
  local out_file = $(1) ;
  Depends $(out_file) : filelists ;
  GenerateFilesInc $(out_file) ;
  return $(out_file) ;
}

actions GenerateFilesInc
{
  python "$(TOP)/bin/generate_iss_files.py" out/lists/*all.*.txt out/lists/*gcc.*.txt out/lists/*vc.*.txt out/lists/wxconfig.* > $(<)
}

INSTALLER_FILES = install_files.inc ;
MakeLocate $(INSTALLER_FILES) : out ;
GenerateSetupFiles $(INSTALLER_FILES) ;

actions CompressFromLists
{
  python "$(TOP)/bin/list_pack_7z.py" -o $(<) $(>)
}

rule PackLists
{
  local target = $(1) ;
  local lists = $(2) ;
  local archives ;
  for l in $(lists)
  {
    local archive = $(l).7z ;
    if "$(HAVE_ARCHIVE_$(archive))" = ""
    {
      local listfile = [ ListFile $(l) ] ;
      MakeLocate $(archive) : out/package ;
      CompressFromLists $(archive) : $(listfile) ;
      Depends $(archive) : $(listfile) ;
      HAVE_ARCHIVE_$(archive) = "yes" ;
    }
    Depends $(target) : $(archive) ;
    archives = $(archives) $(archive) ;
  }
  NotFile $(target) ;
  return $(archives) ;
}

for ARCH in x86 x64
{
  local ARCH_SUFFIX_MGW = "" ;
  if $(ARCH) = x64 { ARCH_SUFFIX_MGW = "64" ; }
  local compilers = vc$(VC_VER) gcc$(MINGW$(ARCH_SUFFIX_MGW)_VER) ;
  PACK_LISTS_$(ARCH)_COMMON =
    base.$(compilers).$(ARCH)
    wx.$(compilers).$(ARCH)
    wx-pdb.$(compilers).$(ARCH)
    ;
  PACK_LISTS_$(ARCH)_SHARED =
    base-dll.$(compilers).$(ARCH)
    base-dll-pdb.$(compilers).$(ARCH)
    ;
  PACK_LISTS_$(ARCH)_STATIC =
    base-static.$(compilers).$(ARCH)
    base-static-pdb.$(compilers).$(ARCH)
    ;
  PackLists setup_packages_$(ARCH)_common : $(PACK_LISTS_$(ARCH)_COMMON) ;
  PackLists setup_packages_$(ARCH)_shared : $(PACK_LISTS_$(ARCH)_SHARED) ;
  PackLists setup_packages_$(ARCH)_static : $(PACK_LISTS_$(ARCH)_STATIC) ;
  Depends setup_packages_$(ARCH) : setup_packages_$(ARCH)_common setup_packages_$(ARCH)_shared setup_packages_$(ARCH)_static ;
  Depends setup_packages : setup_packages_$(ARCH) ;
}

actions RunISCC
{
  $(TOP)/bin/wrap-iscc.sh "$(>)"
}
rule CompileSetupSupport
{
  local outname = $(1) ;
  local source = $(2) ;
  
  local setup_out = $(outname).exe ;
  local setup_src = $(TOP)/source/setup/$(source).iss ;
  MakeLocate $(setup_out) : out/support ;
  RunISCC $(setup_out) : $(setup_src) ;
  Depends $(setup_out) : $(setup_src) $(TOP)/version.inc ;
  return $(setup_out) ;
}

actions GeneratePackagesCode
{
  python "$(TOP)/bin/generate_iss_download.py" -c $(<) -r $(<:DB)_run.iss -x $(<:DB)_extraspace.ini $(>)
}
rule BuildPackagesCode
{
  local outname = $(1) ;
  local packages = $(2) ;
  GeneratePackagesCode $(outname) : $(packages) ;
}

actions SplitReadme
{
  "$(TOP)/bin/split-readme.sh" $(>) $(<:D)
}
rule DoSplitReadme
{
  local readme_source = Readme.rtf ;
  SEARCH on $(readme_source) = $(TOP) ;
  local readme_files ;
  for MODE in shared static
  {
    local mode_file = Readme-$(MODE).rtf ;
    MakeLocate $(mode_file) : out ;
    readme_files = $(readme_files) $(mode_file) ;
  }
  SplitReadme $(readme_files[1]) : $(readme_source) ;
  Depends $(readme_files[1]) : $(readme_source) ;
  Depends $(readme_files[2]) : $(readme_files[1]) ;
  Depends $(1) : $(readme_files) ;
  NotFile $(1) ;
}
DoSplitReadme readme ;

rule CompileDownloader
{
  local target = $(1) ;
  local source = $(2) ;
  local out_prefix = $(3) ;
  local out_suffix = $(4) ;
  local extra_deps = $(5) ;
  
  local setup_out = downloader-$(out_prefix)-$(LIBS_VERSION)$(out_suffix).exe ;
  local setup_src = $(TOP)/source/setup/$(source).iss ;
  MakeLocate $(setup_out) : out ;
  RunISCC $(setup_out) : $(setup_src[1]) ;
  Depends $(setup_out) : $(setup_src) $(TOP)/version.inc $(extra_deps) ;
  Depends $(target) : $(setup_out) ;
}
rule CompileMainSetup2
{
  local target = $(1) ;
  local source = $(2) ;
  local out_prefix = $(3) ;
  local out_suffix = $(4) ;
  local extra_deps = $(5) ;
  
  local setup_out = $(out_prefix)-$(LIBS_VERSION)$(out_suffix).exe ;
  local setup_src = $(TOP)/source/setup/$(source).iss ;
  MakeLocate $(setup_out) : out ;
  RunISCC $(setup_out) : $(setup_src[1]) ;
  Depends $(setup_out) : $(setup_src) $(TOP)/version.inc $(INSTALLER_FILES) $(extra_deps) ;
  Depends $(target) : $(setup_out) ;
}
actions InvokeCompileMainSetup
{
  source $(TOP)/build-environment
  VERSION=`cat $(TOP)/version.inc | grep \".*\" | sed -e 's/#.*\"\(.*\)\"/\\1/'`
  jam -sLIBS_VERSION=$VERSION -sMAINSETUP_INVOKE=yes $PACKOPTS $(<)
}
rule CompileMainSetup
{
  local target = $(1) ;
  local source_suffix = $(2) ;
  local source = binaries$(source_suffix) binaries ;
  local dlsource = downloader$(source_suffix) downloader ;
  local out_prefix = $(3) ;
  local out_suffix = $(4) ;
  local packages_file = $(5) ;
  local pack_lists = $(6) ;

  local package_archives = [ PackLists setup_packages_$(target) : $(pack_lists) ] ;
  local packages_code = $(packages_file).pas ;
  MakeLocate $(packages_code) : out ;
  BuildPackagesCode $(packages_code) : $(package_archives) ;
  Depends $(packages_code) : setup_packages_$(target) ;
  if "$(MAINSETUP_INVOKE)" = "yes"
  {
    CompileDownloader downloader_$(target) : $(dlsource) : $(out_prefix) : $(out_suffix) : $(packages_code) ;
    CompileMainSetup2 real_$(target) : $(source) : $(out_prefix) : $(out_suffix) : $(packages_code) readme downloader_$(target) ;
  }
  else
  {
    InvokeCompileMainSetup real_$(target) ;
  }
  Depends $(target) : real_$(target) ;
}

local ARCH ;
local MODE ;
for ARCH in x86 x64
{
  local ARCH_SUFFIX = "" ;
  if $(ARCH) = x64 { ARCH_SUFFIX = "-x64" ; }
  Depends setup_support_$(ARCH) : [ CompileSetupSupport CopyDLLs$(ARCH_SUFFIX) : CopyToCS$(ARCH_SUFFIX) ] ;
  for s in MSYSsupport VCsupport 
  {
    Depends setup_support_$(ARCH) : [ CompileSetupSupport $(s)$(ARCH_SUFFIX) : $(s)$(ARCH_SUFFIX) ] ;
  }
  if $(ARCH) != x64
  {
    Depends setup_support_$(ARCH) : [ CompileSetupSupport Crosssupport : Crosssupport ] ;
  }
  for MODE in shared static
  {
    local MODE_SUFFIX = "" ;
    if $(MODE) = static { MODE_SUFFIX = "_static" ; }
    local out_prefix_x86 = "cs-win32libs" ;
    local out_prefix_x64 = "cs-winlibs-x64" ;
    local out_suffix_shared = "" ;
    local out_suffix_static = "-static" ;
    local pack_list ;
    if $(MODE) = static { pack_list = "STATIC" ; } else { pack_list = "SHARED" ; }
    CompileMainSetup setup_$(ARCH)_$(MODE)
      : "$(MODE_SUFFIX)$(ARCH_SUFFIX)"
      : $(out_prefix_$(ARCH))
      : $(out_suffix_$(MODE))
      : packages_$(ARCH)_$(MODE)
      : $(PACK_LISTS_$(ARCH)_COMMON) $(PACK_LISTS_$(ARCH)_$(pack_list)) ;
    Depends setup_$(ARCH)_$(MODE) : setup_support_$(ARCH) ;
    Depends setup_$(ARCH) : setup_$(ARCH)_$(MODE) ;
    Depends setup_$(MODE) : setup_$(ARCH)_$(MODE) ;
    Depends setup : setup_$(ARCH)_$(MODE) ;
  }
  
  Depends setup_support : setup_support_$(ARCH) ;
}
