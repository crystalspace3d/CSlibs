SubDir TOP source ;

# Set up default variables used by our custom.cslib
MsvcRegisterVariableProp importlib : importlib ;
MsvcRegisterVariableProp debuginfo : debuginfo ;
MsvcRegisterVariableProp libname : libname ;
MsvcRegisterVariableProp librarydelay : delayload ;
MsvcRegisterVariableProp configtemplatetag : configtemplatetag ;

MsvcGenVariable linkerextraxml : "MergeSections=\".rdata=.text\"" ;
MsvcRegisterVariableProp linkerextraxml : moduledefinition ;

# Goop used by both "base" and "extra" libs
rule LibCommon
{
  local lib = $(1) ;
  local files = $(2) ;
  local libname = $(3) ;
  local deffile = $(4) ;
  local extrainc = $(5) ;
  local options = $(6) ;
  local dllname = $(7) ;
  if ! $(dllname) { dllname = "lib$(lib)-cs" ; }
  local outdir = $(8) ;
  if ! $(outdir) 
  { 
    if ! [ IsElem norelease : $(options) ]
    {
      outdir = "Release" ; 
    }
    else
    {
      outdir = "Temp" ; 
    }
  }
  
  if ! [ IsElem staticonly : $(options) ]
  {
    MsvcSetTargetProp $(lib) : resources : no ;
    MsvcSetTargetProp $(lib) : outputfile : [ ConcatDirs libs $(outdir) $(dllname).dll ] ;
    MsvcSetTargetProp $(lib) : importlib : [ ConcatDirs libs $(outdir) $(libname).lib ] ;
    MsvcSetTargetProp $(lib) : debuginfo : [ ConcatDirs libs $(outdir) $(dllname).pdb ] ;
    MsvcSetTargetProp $(lib) : moduledefinition : 
      "ModuleDefinitionFile=\"../../$(deffile)\"" ;
    Library $(lib) : $(files) : shared ;
    MsvcExtraFile $(lib) : $(deffile) ;
    local d ;
    for d in $(extrainc)
    {
      MsvcIncDirs $(lib) : [ ConcatDirs [ MsvcWorkbuildToRoot ] $(d) ] ;
    }
  }
  
  if ! [ IsElem nostatic : $(options) ] && ( [ IsElem staticonly : $(options) ]
    || [ Property build : projgen_version ] != 7 )
  {
    SubVariant static ;
    MsvcSetTargetProp $(lib)_static : resources : no ;
    MsvcSetTargetProp $(lib)_static : debuginfo : [ ConcatDirs libs $(outdir)_static $(libname).pdb ] ;
    MsvcSetTargetProp $(lib)_static : libname : [ ConcatDirs libs $(outdir)_static $(libname).lib ] ;
    Library $(lib)_static : $(files) ;
    for d in $(extrainc)
    {
      MsvcIncDirs $(lib)_static : [ ConcatDirs [ MsvcWorkbuildToRoot ] $(d) ] ;
    }
    SubVariant ;
  }
}

# Base library - C, used by all VC versions, built with VC8.0
if [ Property build : projgen_version ] = 8
{
  rule BaseLib 
  { 
    LibCommon $(1) : $(2) : $(3) : $(4) : $(5) : $(6) : : $(7) ;
    SetProperty baselibdeps : $(1) : $(1) ;
    SetProperty baselibdeps : $(1)_debug : $(1) ;
    SetProperty baselibdeps : $(1)_static : $(1)_static ;
    SetProperty baselibdeps : $(1)_static_debug : $(1)_static ;
    MsvcCFlags $(1) : "/fp:fast" ;
    MsvcCFlags $(1)_static : "/fp:fast" ;
    # Avoid 8.0 runtime "seeping" into manifest when linking in VC 9
    MsvcDefine $(1)_static : _CRT_NOFORCE_MANIFEST ;
    MsvcDefine $(1)_static : _STL_NOFORCE_MANIFEST ;
  }
}
else
{
  rule BaseLib 
  { 
    local options = $(6) ;
    local outdir = $(7) ;
    if ! $(outdir) 
    { 
      if ! [ IsElem norelease : $(options) ]
      {
	outdir = "Release" ; 
      }
      else
      {
	outdir = "Temp" ; 
      }
    }
    local root = [ MsvcWorkbuildToRoot ] ;
  
    if ! [ IsElem staticonly : $(options) ]
    {
      SetProperty baseliblibs : $(1) : $(root)/libs/$(outdir)/$(3).lib ;
      SetProperty baseliblibs : $(1)_debug : $(root)/libs/$(outdir)/$(3).lib ;
    }
    if ! [ IsElem nostatic : $(options) ]
    {
      
      if [ IsElem staticonly : $(options) ]
      {
	local v = [ Property build : projgen_version ] ;
	outdir = "TempVC$(v)Only" ;
	LibCommon $(1) : $(2) : $(3) : $(4) : $(5) : $(options) : : $(outdir) ;
	SetProperty baselibdeps : $(1)_static : $(1)_static ;
	SetProperty baselibdeps : $(1)_static_debug : $(1)_static ;
      }
      else
      {
	SetProperty baseliblibs : $(1)_static : $(root)/libs/$(outdir)_static/$(3).lib ;
	SetProperty baseliblibs : $(1)_static_debug : $(root)/libs/$(outdir)_static/$(3).lib ;
      }
    }
  }
}

# Helper to set dependencies of extra libs on base libs
rule _SetBaseLibs
{
  local lib = $(1) ;
  local baselibdeps = $(2) ;
  local options = $(3) ;

  for b in $(baselibdeps)
  {
    if [ Property extralib : $(b) ]
    {
      LibDepends $(lib) : $(b) ;
    }
    else
    {
      local d = [ Property baselibdeps : $(b) ] ;
      if "$(d)" != ""
      {
	LibDepends $(lib) : $(d) ;
      }
      else
      {
	local libfile = [ Property baseliblibs : $(b) ] ;
	MsvcExternalLibrary $(lib) : $(libfile) ;
      }
    }
  }
}

# Extra lib - C++, needs to be built for each VC version; also needs different
# versions for release vs debug mode.
rule ExtraLib
{
  local msvcgenver = [ Property build : projgen_version ] ;
  local lib = $(1) ;
  local libname ;
  on $(lib) libname = $(LIBNAME) ;
  if ! $(libname) { libname = "$(lib)-vc$(msvcgenver)" ; }
  local rcfile = $(3) ;
  local options = $(5) ;
  local dlldef = $(6) ;
  local staticdef = $(7) ;
  local baselibdeps = $(8) ;
  local dllname = $(9) ;
  if ! $(dllname) { dllname = "lib$(lib)-csvc$(msvcgenver)" ; }
  
  # "fakestatic": static lib is a DLL really (but links against static libs).
  # For CEGUI.
  if [ IsElem fakestatic : $(options) ]
  {
    options += nostatic ;
  }
  
  local outdirbase ;
  on $(lib) outdirbase = $(OUTDIRBASE) ;
  if ! $(outdirbase) { outdirbase = "Release" ; }
  
  # For a "fakestatic" library ExtraLib is calls itself
  #if [ IsElem fakestatic2 : $(options) ]
  if [ IsElem fakestatic : $(options) ]
  {
    outdir = "$(outdirbase)VC$(msvcgenver)Only_static" ;
  }
  else
  {
    outdir = "$(outdirbase)VC$(msvcgenver)Only" ;
  }
  
  SetProperty extralib : $(lib) : yes ;
  SetProperty extralib : $(lib)_debug : yes ;

  LibCommon $(lib) : $(2) : $(libname) : : $(4) : $(options) : $(dllname) : $(outdir) ;
  for d in $(dlldef) 
  {
    MsvcDefine $(lib) : $(d) ;
  }
  if [ Property build : projgen_version ] != 7
  {
    for d in $(staticdef) 
    {
      MsvcDefine $(lib)_static : $(d) ;
    }
  }
  MsvcExtraFile $(lib) : $(rcfile) ;
  _SetBaseLibs $(lib) : $(baselibdeps) : $(options) ;
  
  MsvcSetTargetProp $(lib)_debug : configtemplatetag : debug ;
  if ! [ IsElem fakestatic : $(options) ] && [ Property build : projgen_version ] != 7
  {
    MsvcSetTargetProp $(lib)_debug_static : configtemplatetag : debug ;
  }
  LibCommon $(lib)_debug : $(2) : $(libname)_d : : $(4) : $(options) : $(dllname)_d : $(outdir) ;
  for d in $(dlldef) 
  {
    MsvcDefine $(lib)_debug : $(d) ;
  }
  if ! [ IsElem fakestatic : $(options) ] && [ Property build : projgen_version ] != 7
  {
    for d in $(staticdef) 
    {
      MsvcDefine $(lib)_debug_static : $(d) ;
    }
  }
  MsvcExtraFile $(lib)_debug : $(rcfile) ;
  _SetBaseLibs $(lib)_debug : $(baselibdeps)_debug : $(options) ;
  
#  if [ IsElem fakestatic : $(options) ] && [ Property build : projgen_version ] != 7
#  {
#    local newopts = [ Filter $(options) : fakestatic ] fakestatic2 ;
#    LIBNAME on $(lib)_static = $(libname) ;
#    ExtraLib $(lib)_static : $(2) : $(rcfile) : $(4) : $(newopts) : $(dlldef) : : $(baselibdeps)_static : $(dllname) ;
#  }
}

include $(TOP)/source/libz.jam ;
include $(TOP)/source/libpng.jam ;
include $(TOP)/source/libjpeg.jam ;
include $(TOP)/source/libmng.jam ;
include $(TOP)/source/libfreetype.jam ;
include $(TOP)/source/libode.jam ;
include $(TOP)/source/lib3ds.jam ;
include $(TOP)/source/libogg.jam ;
include $(TOP)/source/libvorbis.jam ;
include $(TOP)/source/libcal3d.jam ;
include $(TOP)/source/libpcre.jam ;
include $(TOP)/source/libCEGUI.jam ;
include $(TOP)/source/libbullet.jam ;

include $(TOP)/source/libjs.jam ;
include $(TOP)/source/libwx.jam ;
